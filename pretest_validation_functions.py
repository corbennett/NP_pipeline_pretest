# -*- coding: utf-8 -*-
"""
Created on Fri Feb  7 12:37:51 2020

@author: svc_ccg
"""

import numpy as np
import logging

logging.root.setLevel(logging.DEBUG)

def validation_decorator(validation_func):
    def wrapper(*args, **kwargs):
        try:
            out = validation_func(*args, **kwargs)

        except Exception as e:
            logging.debug(validation_func.__name__)
            logging.debug(e)
            out = None, False
        
        return out
    
    return wrapper


def get_sync_line_data(syncDataset, line_label):
    ''' Get rising and falling edge times for a particular line from the sync h5 file
        
        Parameters
        ----------
        dataset: sync file dataset generated by sync.Dataset
        line_label: string specifying which line to read, if that line was labelled during acquisition
        channel: integer specifying which channel to read in line wasn't labelled
        
        Returns
        ----------
        rising: npy array with rising edge times for specified line
        falling: falling edge times
    '''
    
    if line_label in syncDataset.line_labels:
        channel = syncDataset.line_labels.index(line_label)
    else:
        logging.warning('Invalid Line Label: ' + line_label)
        return
    
    sample_freq = syncDataset.meta_data['ni_daq']['counter_output_freq']
    rising = syncDataset.get_rising_edges(channel)/sample_freq
    falling = syncDataset.get_falling_edges(channel)/sample_freq
    
    return rising, falling

@validation_decorator
def validate_stim_vsyncs(syncDataset, tolerance, line_label, vsync_framerate):
    ''' Validate that the sync box is getting 60 Hz signal from stim computer
        Confirms that vsync_rate is within tolerance of 60 Hz'''
    
    vsyncs_rising, vsyncs_falling = get_sync_line_data(syncDataset, line_label)
    vsync_rate = 1/(np.median(np.diff(vsyncs_falling)))
    
    return vsync_rate, (vsync_framerate-tolerance)<vsync_rate<(vsync_framerate+tolerance)

@validation_decorator    
def validate_barcode_syncs(syncDataset, min_edges, line_label):
    ''' Validate that sync box is getting barcodes. Looks for at least min_barcode_num '''
    
    r, f = get_sync_line_data(syncDataset, line_label)
    logging.warning('num barcodes: ' + str(len(f)))
    return len(f), len(f)>=min_edges

@validation_decorator
def validate_cam_syncs(syncDataset, framerate, tolerance, line_label):
    ''' Validate that camera is sending sync pulses within tolerance of designated framerate '''
    
    r, f = get_sync_line_data(syncDataset, line_label)
    cam_rate = 1/np.median(np.diff(f))
    logging.warning('cam rate: ' + str(cam_rate))
    return cam_rate, (framerate-tolerance)<cam_rate<(framerate+tolerance)

@validation_decorator
def validate_pkl_licks(pklData, min_lick_num):
    ''' Validate that pickle file has registered at least min_licks '''    
    
    licks = pklData['items']['behavior']['lick_sensors'][0]['lick_events']
    logging.warning('num licks: ' + str(len(licks)))
    return len(licks), len(licks)>= min_lick_num

@validation_decorator
def validate_pkl_wheel_data(pklData, min_wheel_rotations):
    ''' Validate that there's wheel data in the pkl file:
        Check to see that wheel spun more than min_wheel_rotations '''
    
    dx = pklData['items']['behavior']['encoders'][0]['dx']
    num_rotations = np.sum(dx)/360.  # wheel rotations
    logging.warning('wheel rotations: ' + str(num_rotations))
    return num_rotations, num_rotations>=min_wheel_rotations


    
    
    
    
    
